// Не будет ошибкой

let message = "hello";
message = 123456; 

/* Языки программирования, в которых такое возможно, 
называются «динамически типизированными». 
Это значит, что типы данных есть, 
но переменные не привязаны ни к одному из них. */

//--number--
	let n = 123; //ціле число
	n = 12.345; // число з "плавучую" крапкою
	Операції з number '+-*/'

	// --спеціальні числові значення--
	Infinity представляет собой математическую 
	бесконечность ∞. Это особое значение, 
	которое больше любого числа.

	alert( 1 / 0 );//так ми можемо отримати Infinity
	alert( Infinity );//або спеціально створити 

	NaN означает вычислительную ошибку.

	Значение NaN «прилипчиво». 
	Любая математическая операция с NaN возвращает NaN:

	alert( NaN + 1 ); // NaN
	alert( 3 * NaN ); // NaN
	alert( "не число" / 2 - 1 ); // NaN

	Если где-то в математическом выражении есть NaN, 
	то оно распространяется на весь результат 
	(есть только одно исключение: NaN ** 0 равно 1).

	!!!Математические операции в JavaScript «безопасны». 
	Мы можем делать что угодно: делить на ноль, 
	обращаться с нечисловыми строками как с числами и т.д.
	Скрипт никогда не остановится с фатальной ошибкой (не «умрёт»). 
	В худшем случае мы получим NaN как результат выполнения.!!!

Специальные числовые значения относятся к типу «число». 
Конечно, это не числа в привычном значении этого слова.

//--BigInt--
	В JavaScript тип number не может безопасно работать с числами, 
	большими, чем (253-1) (т. е. 9007199254740991) или меньшими, 
	чем -(253-1) для отрицательных чисел.

	Чтобы создать значение типа BigInt, 
	необходимо добавить n в конец числового литерала:
	//символ "n" в конце означает, что это BigInt
	const bigInt = 1234567890123456789012345678901234567890n;

//--string--
	Строка (string) в JavaScript должна быть заключена в кавычки.;
	let str = "Привет";
	let str2 = 'Одинарные кавычки тоже подойдут';
	let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`;

	В JavaScript существует три типа кавычек.

	Двойные кавычки: "Привет". //прості лапки 
	Одинарные кавычки: 'Привет'.//прості лапки 
	Обратные кавычки: `Привет`// дозволяють додати ${…} 

	let name = "Иван";
	// Вставим переменную
	alert( `Привет, ${name}!` ); // Привет, Иван!
	// Вставим выражение
	alert( `результат: ${1 + 2}` ); // результат: 3

	Выражение внутри ${…} вычисляется, и его результат становится частью строки. 
	Мы можем положить туда всё, что угодно: переменную name, или выражение 1 + 2, 
	или что-то более сложное.

	!Обратите внимание, что это можно делать только в обратных кавычках. 
	Другие кавычки не имеют такой функциональности встраивания!

//--boolean--
	Булевый тип (boolean) может принимать 
	только два значения: true (истина) и false (ложь).;

	let nameFieldChecked = true; // да, поле отмечено
	let ageFieldChecked = false; // нет, поле не отмечено

	Булевые значения также могут быть результатом сравнений:

	let isGreater = 4 > 1;
	alert( isGreater ); // true (результатом сравнения будет "да")

//--null--
	Специальное значение null не относится ни к одному из типов, описанных выше.
	Оно формирует отдельный тип, который содержит только значение null:

	let age = null;

	В JavaScript null не является «ссылкой на несуществующий объект» 
	или «нулевым указателем», как в некоторых других языках.
	Это просто специальное значение, которое представляет собой «ничего», 
	«пусто» или «значение неизвестно».

	В приведённом выше коде указано, 
	что значение переменной age неизвестно.

//--undefined--
	пециальное значение undefined также стоит особняком. 
	Оно формирует тип из самого себя так же, как и null.
	Оно означает, что «значение не было присвоено».

	Если переменная объявлена, 
	но ей не присвоено никакого значения, 
	то её значением будет undefined:

	let age;
	alert(age); // выведет "undefined"

	Технически мы можем присвоить значение undefined любой переменной:

	let age = 123;
	// изменяем значение на undefined
	age = undefined;
	alert(age); // "undefined"
	…Но так делать не рекомендуется. 
	Обычно null используется для присвоения переменной «пустого» 
	или «неизвестного» значения, а undefined – для проверок, 
	была ли переменная назначена.
// --Оператор typrof--
	Если передается выражение, то нужно заключать его в скобки, 
	т.к. typeof имеет более высокий приоритет, чем бинарные операторы:

	typeof 50 + " Квартир"; // Выведет "number Квартир"
	typeof (50 + " Квартир"); // Выведет "string"


// --ВИСНОВОК-- 
В JavaScript есть 8 основных типов данных.

Семь из них называют «примитивными» типами данных:
- number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
- bigint для целых чисел произвольной длины.
- string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
- boolean для true/false.
- null для неизвестных значений – отдельный тип, имеющий одно значение null.
- undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
- symbol для уникальных идентификаторов.
И один не является «примитивным» и стоит особняком:
- object для более сложных структур данных.

Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.
Имеет две формы: typeof x или typeof(x).
Возвращает строку с именем типа. Например, "string".
Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.